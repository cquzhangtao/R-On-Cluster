#MLP neural network

 

#Data import

Data <- read.table("[[DataSetLocation]]", header = TRUE, sep = "\t", comment.char = "")

DS <- Data$[[FirstColumn]]

 

#Durchschnittlichen IST-WIP berechnen

meanWIP <- data.frame(DS=Data[,1], WIPmeans=rowMeans(Data[,-1]))

 

#Std von IST-WIP

sdtWIP <- apply(Data[,-1],1,sd)

 

#VarCoefficient von IST-WIP

varCoWIP <- sdtWIP/meanWIP[,2]

 

#Loop for Traindata

timeHorizon <- [[TimeHorizon]]

WIP_Input <- matrix(0,(ncol(Data)-2)-(timeHorizon-1),timeHorizon*nrow(Data)) 

WIP_Output <-matrix(0,(ncol(Data)-2)-(timeHorizon-1),nrow(Data))

for (DsIteration in 0:(nrow(Data)-1)){

  

  l = 1; 

  iteration = 0;

  for (i in 1:(timeHorizon*((ncol(Data)-2)-(timeHorizon-1))))

  {

    if ((i-1)%%(timeHorizon)==0 ){

      iteration = iteration + 1;

      l =1;

    }

    

    WIP_Input[iteration, l+DsIteration*timeHorizon] <- Data[DsIteration+1,i-timeHorizon*(iteration-1)+(iteration-1)+1]

    WIP_Output[iteration, DsIteration+1]  <- Data[DsIteration+1,i-timeHorizon*(iteration-1)+(iteration-1)+2]

    l = l+1;

  }

  

}

#Input and Output in one data frame

Data_NN <- cbind(WIP_Input,WIP_Output)

 

 

library(RSNNS)

 

#Colums of Input and Output

DataValues <- Data_NN[,1:[[NumberOfInputs]]]

DataTargets <- Data_NN[,([[NumberOfInputs]]+1):([[NumberOfInputs]]+[[NumberOfOutputs]])]

 

#Split Data in Training and Test 

Data_NN <- splitForTrainingAndTest(DataValues, DataTargets, ratio=[[PercentageOfTestData]])

#normalize Data

Data_NN <- normTrainingAndTestSet(Data_NN)

 

#generate a mlp net

model <- mlp(Data_NN$inputsTrain, Data_NN$targetsTrain, size=c([[NeuronsPerLayer]]),

             maxit=[[MaxIt]],learnFunc="[[LearningFunc]]",linOut=TRUE, inputsTest=Data_NN$inputsTest, targetsTest=Data_NN$targetsTest)

 

 

summary(model)

#Plot iterativ error of the model

plotIterativeError(model)

 

#Predict new Data with the trained mlp Modell

predictions <- predict(model,Data_NN$inputsTest)

#Plot test against predictet Data

plot(predictions,Data_NN$targetsTest)

 

 

#Statistische Auswertung Ergebniss

#Quadratischer Fehler berechnen und Mittelwert über DS

quad.fehler <- (Data_NN$targetsTest - predictions)^2

mean.quad.error <- colMeans(quad.fehler)

errorWafer <- sqrt(mean.quad.error)

 

#MSE

MSE <- mean(mean.quad.error)

write.table(MSE, "[[ResultLocation]]/MSE.txt") 

 

#Alles in Ergebnisstabelle und speichern

DS.mean <- cbind.data.frame(DS,mean.quad.error, errorWafer, meanWIP, sdtWIP,varCoWIP )

write.table(DS.mean, "[[ResultLocation]]/DS.mean.txt") 
